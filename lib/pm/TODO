Plans and ideas for 1.1:

* Information about file system on a separate tab in the properties, unique
  to the file system in use.

* Check if no of sectors fits in an unsigned 32 bit int for msdos partition
  tables.

* save msdos mbr?

* let the user specify external command locations and options in the settings;
  use some program and binary management setup internally like k3b has it

* parse progress information at least from e2fsck and ntfsclone (do we use the
  latter at all? if not we should); maybe others.

* offer a) no alignment of partition boundaries at all or b) legacy cylinder
  alignment or c) sector based alignment (the name is misleading, though)

* don't hardcode any support for libparted-related stuff like shrinking fat16
  in the file system classes.

* support KLocale::BinaryUnitDialect and use KLocale's formatting methods

===============================================================================

Bugs to fix for 1.1:

* copy&paste seems broken wrt alignment when copying from cylinder aligned to
  sector aligned drives (maybe even more than that)

* resizing a newly created extended that has children (leading to a merge of
  operations) crashes in NewOperation::description(). this is intermittent
  and probably fixed in r1107315.

* make sure the default file system can indeed be created

===============================================================================

For releases after 1.1:

* write a setup-kcm in the style of k3b's so that the user can set the r/w
  permissions of the disks there; also use kauth to update the partition table
  in the kernel. that should cover all cases where we actually need root
  privileges now. -- we actually also need root privs for SMART now.

* The whole lvm/dm debacle.

* The interface between core and the file systems needs some more thought.
  Ideally we'd be free to use either external helper apps (like we do now) or
  libraries to achieve the same things. Libraries in this case being libntfs-3g
  and libext2fs. There's one for reiserfs too, iirc.

* Write a udisks backend plugin.

* Add a SMART self test operation, only available if the backend plugin
  supports that (udisks does, libparted does not).
